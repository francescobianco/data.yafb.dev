Genera un file Apps Script che trasformi uno spreadsheet in una DB via API

prendi nota del fatto che input delle doGet e doPost sono di questa forma

GET:
{
  "parameter": {
    "sheet": "2025",
    "$REMOTE_ADDRESS": "81.56.115.230",
    "$REQUEST_URI": "/list",
    "$USER_AGENT": "curl/7.87.0"
  },
  "contentLength": -1,
  "parameters": {
    "$REQUEST_URI": [
      "/list"
    ],
    "$REMOTE_ADDRESS": [
      "81.56.115.230"
    ],
    "$USER_AGENT": [
      "curl/7.87.0"
    ],
    "sheet": [
      "2025"
    ]
  },
  "contextPath": "",
  "queryString": "$REMOTE_ADDRESS=81.56.115.230&$USER_AGENT=curl%2F7.87.0&$REQUEST_URI=%2Flist&sheet=2025"
}

POST:
{
  "contentLength": 37,
  "contextPath": "",
  "queryString": "$REMOTE_ADDRESS=185.2.23.188&$USER_AGENT=curl%2F8.5.0&$REQUEST_URI=%2Finsert",
  "postData": {
    "contents": "{\"sheet\":\"Test CIAO\", \"name\":\"Frank\"}",
    "length": 37,
    "name": "postData",
    "type": "application/json"
  },
  "parameters": {
    "$USER_AGENT": [
      "curl/8.5.0"
    ],
    "$REQUEST_URI": [
      "/insert"
    ],
    "$REMOTE_ADDRESS": [
      "185.2.23.188"
    ]
  },
  "parameter": {
    "$USER_AGENT": "curl/8.5.0",
    "$REQUEST_URI": "/insert",
    "$REMOTE_ADDRESS": "185.2.23.188"
  }
}

dobbiamo implementare le seguenti api

GET /list
POST /insert
POST /update
POST /delete

ecco come deve apparira la risposta di ogni chiamata

GET /list
Response: {
  "sheet": "2025",
  "columns": ["name", "age"],
  "data": [
	{
	  "name": "Frank",
	  "age": 25
	},
	{
	  "name": "John",
	  "age": 30
	}
  ]
}

POST /insert
Response: {
  "sheet": "2025",
  "columns": ["name", "age"],
  "data": [
  		{
  		  "sheet": "2025",
  		  "row": 2
		  "name": "Frank",
		  "age": 25
		  }
  ]
}

POST /update
Response: {
  "sheet": "2025",
  "columns": ["name", "age"],
  "data": [
  		{
  		"sheet": "2025",
  		"row": 2,
		  "name": "Frank",
		  "age": 25
		  }
  ]
}

POST /delete
Response: {
  "sheet": "2025",
  "columns": ["name", "age"],
  "data": [
  		{
  		"sheet": "2025",
  		"row": 25,
		  "name": "Frank",
		  "age": 25
		  }
  ]
}


Ecco alcuni casi di test

## restituisce tutti i record dal foglio 2025
GET /list?sheet=2025

## restituisce tutti i record dal foglio 2025 dove la row e uguale a 2
GET /list?sheet=2025&row=2

## restituisce tutti i record dal foglio 2025 dove la colonna name e uguale a Frank
GET /list?sheet=2025&name=Frank

## restituisce tutti i record in cui la colonna city e vuota e la colonna name e uguale a Frank
GET /list?sheet=2025&city=&name=Frank

## Cancella il record row 2 dal foglio 2025
POST /delete
{
  "sheet": "2025",
  "row": 2
}

## Cancella i record in cui la colonna age e uguale a 16, 17, 21 dal foglio 2025
POST /delete
{
  "sheet": "2025",
  "age": [ 16, 17, 21 ]
}

## Cancella i record in cui la colonna age e uguale a 16, 17, 21 dal foglio 2025
POST /delete
{
  "sheet": "2025",
  "age": { ">": 16, "<": 21 }
}

ricorda le seguenti feature

- quando uno sheet non viene trovato in scrittura (solo in insert) deve essere creato
- quando uno sheet non viene esplicitato si fa riferimento al primo sheet disponibile
- tutti i messaggi devono essere scritti in inglese
- assicurati che la getOrCreateSheet sia chiamata solo nella api di insert
- assicurati che la creazione dello sheet funzioni verificando che sia stato creato
- restituisci nella response il nome dello sheet manipolato in una chiave a parte della response questo deve servire come conferma che lo sheet selezionato sia quello corretto
- ricorda che lo sheet su cui agire nel caso GET e un parametro in di querystring nel caso post e un parametro nel body della richiesta JSON
- nel caso POST lo sheetname da modificare o creare si trova nel payload JSON del body quindi devi prenderlo con e.postData.contents.sheet
- ricorda che per ogni oggetto inserito o aggioranto nella tabella devono essere agguinte le colonne per ospitare i nuovi dati
- l'oggetto json in ingesso deve essere esploso in campi radice e e i campi sotto la radice devono essere appiattivi con la notazione '.'
- assicurati dopo l'inserimento di verificare che il record sia effettivamente presente quindi facendo dopo la append una read dell'ultimo rigo e contronllare i due valori
- nel codice ci deve essere una funzione updateHeaders che si occupa di aggiornare l'header della tabella con i nuovi campi deve sempre fare il merge tra quanto gia esiste fare la diff con quelli del nuovo oggetto da inserire o aggiornare e poi aggiornare la prima riga
- attenzione nella insert e nella update la proprietà sheet è una chiave e non deve essere inserita come colonna o aggiornata quindi non ci sara mail la colonna sheet, attenzione però che data in risposta lo sheet ci deve essere quindi deve essere rimosso proprio in prossimita della chiamata concreta appendRow
- stai attento a togliere nel merge delle colonne iniziali eventuali colonne vuote quando il foglio e vuoto
- un altro campo chiave da trattare come lo sheet e il row che riporta il numero di riga per come visibile nello spreadsheet quello ci deve essere sempre
- i record ritornati nella response data non devono essere flatten ma strutturati e devono contenere anche le colonne che in input non ho mandato
- ricordati che i record in response data devono sempre contenere la chiave sheet e row
- nella GET tutte le chiave del query string che non iniziano per $ sono considerate colonne da filtrare es. ?city.name=Palermo significa che voglio solo i record dove la colonna city.name e appunto Palermo
- assicurati che delete funzioni su piu righe e che restituisca i record cancellati considera che le chiavi possono essere quelle libere passate nel postData quindi se voglio cancellare passero qualcosa simile ha {"sheet":"2025","row":2}
- dobbiamo migliorare la debuggabbilità del progetto, ci devono essere solo due try catch uno nel doGet e uno nel doPost e devono restituire un messaggio di errore in formato JSON, questo mi permette quando devo far emergere un valore mi basterà fare throw di una eccezione che mi risale fino cosi di avere un response il valore che mi interessa
- ogni response deve essere in formato JSON ma terminare con un newline
- assicurati che quando una /list restituisca nessun dato, deve dare come response un array vuoto e non un array con un oggetto vuoto o null
- attenzione non c'è nessuna chiave "filter" speciale, quando trovi filter si intente una colonna di nove filter e il valore da filtrare
- centralizza il sistema di filterting in modo da poterlo riutilizzare in tutte le chiamate /list /delete /update

ecco un implementazione di riferimento

/**
 * Google Apps Script: Spreadsheet API as DB
 *
 * Endpoints:
 *   GET /list
 *   POST /insert
 *   POST /update
 *   POST /delete
 *
 * All responses are in JSON format (terminated with a newline).
 */

function doGet(e) {
  try {
    var action = extractAction(e);
    var sheetName = extractSheetNameFromGet(e);
    var sheet = getSheet(sheetName);
    if (!sheet) {
      return outputJSON({ error: "Sheet not found", sheet: sheetName });
    }

    if (action === "list") {
      var dataObj = readData(sheet);

      // Build filters from query parameters: all keys that are not "$*" or "sheet"
      var filters = {};
      for (var key in e.parameter) {
        if (e.parameter.hasOwnProperty(key) && key !== "sheet" && key.indexOf("$") !== 0) {
          filters[key] = e.parameter[key];
        }
      }
      if (Object.keys(filters).length > 0) {
        dataObj.data = applyFilters(dataObj.data, filters);
      }

      return outputJSON({
        sheet: sheet.getName(),
        columns: dataObj.columns,
        data: dataObj.data
      });
    }

    return outputJSON({ error: "Invalid action", sheet: sheetName });
  } catch (error) {
    return outputJSON({ error: "Error processing request: " + error.message });
  }
}

function doPost(e) {
  try {
    var action = extractAction(e);
    var params;
    try {
      params = JSON.parse(e.postData.contents);
    } catch (error) {
      return outputJSON({ error: "Invalid JSON data" });
    }

    // Flatten the incoming JSON object so that nested fields become "parent.child"
    params = flattenObject(params);

    // For POST, the sheet name is provided in the JSON payload ("sheet")
    var sheetName = params.sheet || getFirstSheetName();
    // Remove the 'sheet' key so it is not inserted/updated as a column
    delete params.sheet;

    var sheet;
    if (action === "insert") {
      // Only for insert: create the sheet if it does not exist.
      sheet = getOrCreateSheet(sheetName);
    } else {
      sheet = getSheet(sheetName);
    }
    if (!sheet) {
      return outputJSON({ error: "Sheet not found", sheet: sheetName });
    }

    if (action === "insert") {
      var result = insertData(sheet, params);
      return outputJSON({
        sheet: sheet.getName(),
        columns: result.columns,
        data: [result.inserted]
      });
    }

    if (action === "update") {
      var result = updateData(sheet, params);
      if (result.error) {
        return outputJSON({ error: result.error, sheet: sheet.getName(), columns: result.columns });
      }
      return outputJSON({
        sheet: sheet.getName(),
        columns: result.columns,
        data: [result.updated]
      });
    }

    if (action === "delete") {
      var result = deleteData(sheet, params);
      if (result.error) {
        return outputJSON({ error: result.error, sheet: sheet.getName(), columns: result.columns });
      }
      // Ensure the deleted data is always returned as an array.
      var deletedData = Array.isArray(result.deleted) ? result.deleted : [result.deleted];
      return outputJSON({
        sheet: sheet.getName(),
        columns: result.columns,
        data: deletedData
      });
    }

    return outputJSON({ error: "Invalid action", sheet: sheetName });
  } catch (error) {
    return outputJSON({ error: "Error processing request: " + error.message });
  }
}

/**
 * Extracts the API action from the $REQUEST_URI parameter.
 * Example: "/list" becomes "list"
 */
function extractAction(e) {
  var uri = e.parameter && e.parameter["$REQUEST_URI"];
  if (uri) {
    if (typeof uri === "string") {
      return uri.substring(1); // remove leading '/'
    } else if (uri instanceof Array) {
      return uri[0].substring(1);
    }
  }
  return "";
}

/**
 * Extracts the sheet name for GET requests from query parameters.
 */
function extractSheetNameFromGet(e) {
  if (e.parameter && e.parameter.sheet) {
    if (typeof e.parameter.sheet === "string") {
      return e.parameter.sheet;
    } else if (e.parameter.sheet instanceof Array) {
      return e.parameter.sheet[0];
    }
  }
  return getFirstSheetName();
}

/**
 * Returns the name of the first sheet in the spreadsheet.
 */
function getFirstSheetName() {
  return SpreadsheetApp.getActiveSpreadsheet().getSheets()[0].getName();
}

/**
 * Gets a sheet by its name.
 */
function getSheet(sheetName) {
  return SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
}

/**
 * Gets or creates a sheet.
 * Only used in the insert API. If the sheet does not exist, it is created.
 */
function getOrCreateSheet(sheetName) {
  var ss = SpreadsheetApp.getActiveSpreadsheet();
  var sheet = ss.getSheetByName(sheetName);
  if (!sheet) {
    sheet = ss.insertSheet(sheetName);
    if (!sheet) throw new Error("Failed to create sheet: " + sheetName);
  }
  return sheet;
}

/**
 * Reads all data from the sheet.
 * Returns an object with "columns" (the header row) and "data" (records).
 * Each record includes the "row" property (the actual spreadsheet row number).
 */
function readData(sheet) {
  var data = sheet.getDataRange().getValues();
  if (data.length < 1) return { columns: [], data: [] };

  // Filter out any empty header cells.
  var headers = data[0].filter(function(h) { return h !== ""; });
  var result = [];
  for (var i = 1; i < data.length; i++) {
    var flatObj = {};
    for (var j = 0; j < headers.length; j++) {
      flatObj[headers[j]] = data[i][j];
    }
    // Add the actual row number.
    flatObj["row"] = i + 1;
    result.push(unflattenObject(flatObj));
  }
  return { columns: headers, data: result };
}

/**
 * Flattens a nested object using dot notation.
 * Example: { a: { b: "value" } } becomes { "a.b": "value" }.
 */
function flattenObject(obj, prefix) {
  var result = {};
  prefix = prefix ? prefix + "." : "";
  for (var key in obj) {
    if (!obj.hasOwnProperty(key)) continue;
    if (typeof obj[key] === "object" && obj[key] !== null && !Array.isArray(obj[key])) {
      var flatObject = flattenObject(obj[key], prefix + key);
      for (var subKey in flatObject) {
        if (flatObject.hasOwnProperty(subKey)) {
          result[subKey] = flatObject[subKey];
        }
      }
    } else {
      result[prefix + key] = obj[key];
    }
  }
  return result;
}

/**
 * Unflattens a flat object with dot notation into a nested object.
 */
function unflattenObject(data) {
  var result = {};
  for (var key in data) {
    if (!data.hasOwnProperty(key)) continue;
    var parts = key.split('.');
    var current = result;
    for (var i = 0; i < parts.length; i++) {
      if (i === parts.length - 1) {
        current[parts[i]] = data[key];
      } else {
        if (current[parts[i]] === undefined) {
          current[parts[i]] = {};
        }
        current = current[parts[i]];
      }
    }
  }
  return result;
}

/**
 * Updates the header row of the sheet with new keys from newData.
 * Merges existing headers with keys from newData (ignoring "sheet" and "row"),
 * and removes any empty header cells when the sheet is empty.
 */
function updateHeaders(sheet, newData) {
  var range = sheet.getDataRange();
  var values = range.getValues();
  var headers = [];
  if (values.length > 0) {
    headers = values[0].filter(function(h) { return h !== ""; });
  }
  var headerSet = {};
  for (var i = 0; i < headers.length; i++) {
    headerSet[headers[i]] = true;
  }
  var newKeys = Object.keys(newData).filter(function(key) {
    return key !== "sheet" && key !== "row";
  });
  var updated = false;
  for (var i = 0; i < newKeys.length; i++) {
    if (!headerSet[newKeys[i]]) {
      headers.push(newKeys[i]);
      headerSet[newKeys[i]] = true;
      updated = true;
    }
  }
  if (updated || values.length === 0) {
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  }
  return headers;
}

/**
 * Inserts a record into the sheet.
 * Updates headers, appends a new row, verifies the insertion,
 * and then returns the full structured record (including the "row" number).
 */
function insertData(sheet, record) {
  var headers = updateHeaders(sheet, record);
  var row = headers.map(function(header) {
    return record[header] !== undefined ? record[header] : "";
  });
  sheet.appendRow(row);
  var lastRow = sheet.getLastRow();
  var insertedValues = sheet.getRange(lastRow, 1, 1, headers.length).getValues()[0];
  var flatInserted = {};
  for (var i = 0; i < headers.length; i++) {
    flatInserted[headers[i]] = insertedValues[i];
  }
  flatInserted["row"] = lastRow;
  var structured = unflattenObject(flatInserted);

  // Verify the insertion by comparing the values.
  for (var i = 0; i < headers.length; i++) {
    if (row[i] != insertedValues[i]) {
      throw new Error("Insertion verification failed on header: " + headers[i]);
    }
  }
  return { inserted: structured, columns: headers };
}

/**
 * Updates a record in the sheet.
 * Expects a "row" key in params to identify which row to update.
 * Returns the updated structured record.
 */
function updateData(sheet, params) {
  if (!params.row) {
    throw new Error("Missing 'row' parameter for update");
  }
  var rowNum = Number(params.row);
  // Remove 'row' from update fields.
  var updateFields = Object.assign({}, params);
  delete updateFields.row;
  var headers = updateHeaders(sheet, updateFields);
  var data = sheet.getDataRange().getValues();
  if (rowNum < 2 || rowNum > data.length) {
    throw new Error("Row not found");
  }
  // Update each cell for which an update field exists.
  for (var j = 0; j < headers.length; j++) {
    if (updateFields[headers[j]] !== undefined) {
      sheet.getRange(rowNum, j + 1).setValue(updateFields[headers[j]]);
    }
  }
  var updatedValues = sheet.getRange(rowNum, 1, 1, headers.length).getValues()[0];
  var flatUpdated = {};
  for (var j = 0; j < headers.length; j++) {
    flatUpdated[headers[j]] = updatedValues[j];
  }
  flatUpdated["row"] = rowNum;
  var structured = unflattenObject(flatUpdated);
  return { updated: structured, columns: headers };
}

/**
 * Deletes record(s) from the sheet.
 * Supports deletion by explicit "row" or by filtering with other keys.
 * Returns the full structured deleted record(s) (including "row").
 */
function deleteData(sheet, params) {
  var data = sheet.getDataRange().getValues();
  if (data.length < 1) return { error: "Sheet is empty", columns: [] };

  var headers = data[0].filter(function(h) { return h !== ""; });
  var deletedRecords = [];

  if (params.row) {
    // Delete by explicit row number.
    var rowNum = Number(params.row);
    if (rowNum < 2 || rowNum > data.length) {
      throw new Error("Row not found");
    }
    var rowData = sheet.getRange(rowNum, 1, 1, headers.length).getValues()[0];
    var record = {};
    for (var i = 0; i < headers.length; i++) {
      record[headers[i]] = rowData[i];
    }
    record["row"] = rowNum;
    deletedRecords.push(unflattenObject(record));
    sheet.deleteRow(rowNum);
  } else {
    // Delete by filters: use all keys in params as filters.
    var filters = {};
    for (var key in params) {
      if (params.hasOwnProperty(key)) {
        filters[key] = params[key];
      }
    }
    // Read all data.
    var allData = readData(sheet).data;
    // Find matching records.
    var matchingRecords = applyFilters(allData, filters);
    // Delete rows from bottom to top.
    var rowsToDelete = matchingRecords.map(function(rec) { return rec.row; });
    rowsToDelete.sort(function(a, b) { return b - a; });
    for (var i = 0; i < rowsToDelete.length; i++) {
      var r = rowsToDelete[i];
      var rowData = sheet.getRange(r, 1, 1, headers.length).getValues()[0];
      var record = {};
      for (var j = 0; j < headers.length; j++) {
        record[headers[j]] = rowData[j];
      }
      record["row"] = r;
      deletedRecords.push(unflattenObject(record));
      sheet.deleteRow(r);
    }
  }
  return { deleted: deletedRecords, columns: headers };
}

/**
 * Applies filters to an array of records.
 * Each key in filters is compared against the flattened record.
 */
function applyFilters(records, filters) {
  return records.filter(function(record) {
    var flatRecord = flattenObject(record);
    for (var key in filters) {
      if (filters.hasOwnProperty(key)) {
        // Compare with loose equality; for more advanced filtering (e.g., >, <) you can extend this logic.
        if (flatRecord[key] != filters[key]) {
          return false;
        }
      }
    }
    return true;
  });
}

/**
 * Helper function to output a JSON response.
 * The response is terminated with a newline.
 */
function outputJSON(data) {
  return ContentService.createTextOutput(JSON.stringify(data) + "\n")
    .setMimeType(ContentService.MimeType.JSON);
}
